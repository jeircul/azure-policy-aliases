# Internally used GitHub action to authenticate to Azure using OIDC (federated token)
# This is usually used by managed identities
# Last revision: Feb 15th, 2024

name: Azure Federated Credentials login
description: Login to Azure Powershell with Federated Credentials, also installs Az.Accounts if it is not installed
inputs:
  client-id:
    required: true
    description: Client ID of the identity to federate
  tenant-id:
    required: true
    description: Tenant ID of the identity to federate
  enable-cli:
    required: false
    description: Use with Azure CLI
runs:
  using: "composite"
  steps:
    - name: Login
      env:
        CLIENT_ID: ${{ inputs.client-id }}
        TENANT_ID: ${{ inputs.tenant-id }}
        ENABLE_CLI: ${{ inputs.enable-cli }}
      shell: pwsh
      run: |
        if(-not (Get-Module Az.Accounts -ListAvailable)){Install-Module Az.Accounts -Force}
        $secureOIDCToken = $ENV:ACTIONS_ID_TOKEN_REQUEST_TOKEN | ConvertTo-SecureString -AsPlainText
        $federatedToken = (Invoke-RestMethod "$($ENV:ACTIONS_ID_TOKEN_REQUEST_URL)&audience=api://AzureADTokenExchange" -Authentication Bearer -token $secureOIDCToken).value
        Connect-AzAccount -FederatedToken $federatedToken -Tenant $Env:TENANT_ID -ApplicationID $Env:CLIENT_ID
        # Az Login if enable-cli option is set
        if($ENV:ENABLE_CLI) {
          az login --service-principal -u $($Env:CLIENT_ID) -t $($Env:TENANT_ID) --federated-token $federatedToken --allow-no-subscriptions
        }
